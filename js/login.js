

async function LoginInit() {
    await includeHTML();
    await loadUserData();
    await loadContacts();
    checkDisplaywidth();
    //resetSelectedTab();////wo ist diese Funktion//? unter template.ja (sorgt dafür, dass richtiger oder kein Tab in Sidebar bzw. Footer ausgewählt ist)
}

async function checkDisplaywidth() {
    if (window.innerWidth >= 428) {
        animationLogo();
    } else {
        animationLogoResponsive();
    }
}



function animationLogo() {
    const logo = document.getElementById('logo-join');
    const animateHelper = document.querySelector('.start-animations-helper');
    setTimeout(() => {
        logo.classList.add('animate-logo');
        animateHelper.classList.add('start-animations-helper');
        animateHelper.classList.add('d-none');
    }, 12);
}


function animationLogoResponsive() {
    const logoDark = document.getElementById('logo-join');
    const logoLight = document.getElementById('logo-light');
    const animateHelper = document.querySelector('.start-animations-helper');

    setTimeout(() => {
        logoLight.classList.remove('d-none');
        logoLight.classList.add('animate-logo');
        animateHelper.classList.add('start-animations-helper');
        animateHelper.classList.add('d-none');
    }, 12);

}

/**
 * This function is part of the forwarding from signUp to login.
 * If the forwarding was successful, a message appears which is generated by a query parameter.
 * 
 */
function callStatusofSignUp() {
    const signUpStatus = localStorage.getItem('signUpStatus');
    const urlParams = new URLSearchParams(window.location.search);
    const msg = urlParams.get('msg');
    const msgBox = document.getElementById('msgBox');

    if (signUpStatus === 'completed' && msg) {
        const msgSpan = document.createElement('span');
        msgSpan.innerHTML = msg;
        msgSpan.classList.add('successfullyBtn');
        msgBox.appendChild(msgSpan);
        localStorage.removeItem('signUpStatus');
    } else {
        msgBox.style.display = 'none';
    }
}


function checkIfRememberedData() {
    if (localStorage.getItem('email')) {
        let rememberedEmail = localStorage.getItem('email');
        let rememberedPassword = localStorage.getItem('password');

        let emailInput = document.getElementById('email');
        let passwordInput = document.getElementById('password');

        emailInput.value = rememberedEmail;
        passwordInput.value = rememberedPassword;

        disableLogInButton();
    }
}


async function login() {
    let emailInput = document.getElementById('email');
    let convertedEmail = emailInput.value.toLowerCase();

    let passwordInput = document.getElementById('password');
    let currentUser = users.find(u => u.email.toLowerCase() == convertedEmail && u.password == passwordInput.value);
    if (currentUser) {
        loggedInEmail = currentUser.email;
        await setItem('loggedInEmail', loggedInEmail);
        window.location.href = './summary.html';
        checkStatusofCheckBox();
        clearLogIn();
    } else {
        displayErrorMessage('wrong e-mail or password', emailInput);
        displayErrorMessage('wrong e-mail or password', passwordInput);
    }
}

function disableLogInButton() {
    let emailInput = document.getElementById('email');
    let passwordInput = document.getElementById('password');
    const LogInButton = document.getElementById('LogInButton');

    const allFieldsFilled = emailInput.value && passwordInput.value;

    if (allFieldsFilled) {
        LogInButton.removeAttribute('disabled');
        LogInButton.classList.remove('if-button-disabled');
        LogInButton.classList.add('btn-db');

    } else {
        LogInButton.setAttribute('disabled', true);
        LogInButton.classList.add('if-button-disabled');
    }
}

function checkStatusofCheckBox() {
    let checkbox = document.getElementById('checkbox');
    if (checkbox.checked) {
        let emailInput = document.getElementById('email');
        let passwordInput = document.getElementById('password');
        localStorage.setItem('email', emailInput.value);
        localStorage.setItem('password', passwordInput.value);
    }
}

async function useGuestLogIn() {
    document.getElementById('email').value = 'guest@account';
    document.getElementById('password').value = 'joinGuest2024';

    const guestUser = users.find(user => user.email === 'guest@account');
    if (guestUser) {
        await setItem('loggedInEmail', loggedInEmail);
        clearLogIn();
        window.location.href = './summary.html';
    }
}

function clearLogIn() {
    document.getElementById('email').value = '';
    document.getElementById('password').value = '';
}



